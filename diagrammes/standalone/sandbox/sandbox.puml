@startuml

class SandboxSpecs {
    sandbox_version: str
    docker_version: str
    cpu_core: int
    cpu_logical: int
    cpu_freq_min: float
    cpu_freq_max: float
    memory_ram: int
    memory_swap: int
    memory_storage: JSONField[str, int]
}

class ContainerSpecs {
    count: int
    process: int
    working_dir_device: str
    cpu_count: int
    cpu_period: int
    cpu_shares: int
    cpu_quota: int
    memory_ram: int
    memory_swap: int
    memory_storage: int
    libraries: JSONField[str, str]
    bin: ArrayField[str]
    environ: JSONField[str, str]
}

class SandboxUsage {
    sandbox: Sandbox <<fk>>
    cpu_usage: ArrayField[float, float, float, float]
    cpu_freq: float
    memory_ram: int
    memory_swap: int
    memory_storage: JSONField[str, int]
    writing_io: JSONField[str, int]
    writing_bytes: JSONField[str, int]
    reading_io: JSONField[str, int]
    reading_bytes: JSONField[str, int]
    sending_packets: int
    sending_bytes: int
    receiving_packets: int
    receiving_bytes: int
    process: int
    container: int
    date: DateTimeField
}

class Sandbox {
    name: str
    url: URLField
    enabled: bool
    client_id: str
    client_secret: str
    server_specs: SandboxSpecs <<fk>>
    container_specs: ContainerSpecs <<fk>>
    poll_usage_every: DurationField <<fk>>

    poll_usage(self) -> SandboxUsage
    poll_specification(self) -> Tuple[SandboxSpecs, ContainerSpecs]
    execute(self, config: Dict[str, Any], environment: BinaryIO = None) -> dict
    retrieve(self, environment: str, file: str = None) -> Optional[BinaryIO]
}

Sandbox --> SandboxSpecs
Sandbox --> ContainerSpecs
Sandbox *-- SandboxUsage

@enduml
